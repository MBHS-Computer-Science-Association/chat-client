import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class Client {
	static int portFrom;
	static int portTo;
	static InetAddress staticInetAddress;

	private boolean isActive;
	private Queue<Message> messageQueue;
	private Set<Peer> peers;
	
	// UDP Socket - DatagramSocket
	private DatagramSocket socket;
	private InetAddress inetAddress;

	private ClientWindow window;
	private boolean isRunning = true;

	public Client() throws UnknownHostException {
		// default port is 85
		this(85);
	}

	public Client(int port) throws UnknownHostException {
		this(InetAddress.getLocalHost(), port);
	}
	
	public Client(InetAddress address, int port) {
		isRunning = true;
		messageQueue = new LinkedList<>();
		// messageQueue = new PriorityQueue<>();
		openConnection(port);
		listen();
		window = new ClientWindow(this);
		window.openClient();
		displayMessages();
	}

	public void openConnection(int port) {
		try {
			socket = new DatagramSocket(port);
			// change to actual IP address
			inetAddress = InetAddress.getLocalHost();
			// inetAddress = InetAddress.getByName("localhost");
		} catch (SocketException | UnknownHostException e) {
			e.printStackTrace();
		}
		System.out.println(inetAddress.getHostAddress());
		System.out.println(socket.getLocalAddress().getHostAddress());
	}

	public void send(Message message) {
		final byte[] data;
		try {
			data = Message.serialize(message);
			new Thread("Sending Message") {
				public void run() {
					// DatagramPacket packet = new DatagramPacket(data,
					// data.length, inetAddress, port);
					DatagramPacket packet = new DatagramPacket(data, data.length, staticInetAddress, portTo);
					try {
						socket.send(packet);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public DatagramPacket receivePacket() {
		byte[] data = new byte[1024];
		DatagramPacket packet = new DatagramPacket(data, data.length);
		try {
			socket.receive(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return packet;
	}

	public void displayMessages() {
		new Thread("Display Messages") {
			public void run() {
				Message message;
				while (isRunning) {

					try {
						Thread.sleep(15);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

					if (window.isActive() && window.isReady()) {
						if ((message = messageQueue.poll()) != null) {
							window.displayMessage(message);
						}
					}

				}
			}
		}.start();
	}

	public void listen() {
		new Thread("Listen") {
			public void run() {
				while (isRunning) {
					DatagramPacket packet = receivePacket();
					try {
						Message message = (Message) Message.deserialize(packet.getData());
						messageQueue.add(message);
					} catch (ClassNotFoundException | IOException e) {
						e.printStackTrace();
					}
				}
			}
		}.start();
	}

	public Queue<Message> getMessageQueue() {
		return messageQueue;
	}

	public static void main(String[] args) {
		portFrom = Integer.parseInt(args[0]);
		portTo = Integer.parseInt(args[1]);
		try {
			staticInetAddress = InetAddress.getByName(args[2]);
			staticInetAddress = InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		try {
			Client testClient = new Client();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	}
}
