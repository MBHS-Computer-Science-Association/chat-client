import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.Queue;

public class Client {
	private boolean isActive;
	private Queue<Message> messageQueue;
	// UDP Socket - DatagramSocket
	private DatagramSocket socket;
	private InetAddress inetAddress;
	
	private ClientWindow window;
<<<<<<< HEAD
	private boolean isRunning = true;
	
=======

>>>>>>> origin/master
	public Client() {
		messageQueue = new LinkedList<>();
		//
		// messageQueue = new PriorityQueue<>();
		window = new ClientWindow(this);
		window.openClient();
		window.displayMessage(new Message("Hello"));
	}
<<<<<<< HEAD
	
	public void openConnection() {
		try {
			socket = new DatagramSocket();
			// change to actual IP address
			inetAddress = InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (SocketException e) {
			e.printStackTrace();
		}
		System.out.println(inetAddress.getHostAddress());
	}
	
=======

>>>>>>> origin/master
	public void send(Message message) {
		byte[] data;
		try {
			data = Message.serialize(message);
		} catch (IOException e) {
			e.printStackTrace();
		}
		new Thread("Sending") {
			public void run() {
				DatagramPacket packet = new DatagramPacket(data, data.length, inetAddress, port);
				try {
					socket.send(packet);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}.start();
	}
<<<<<<< HEAD
	
	public void listen() {
		new Thread() {
=======

	public void activateMessages() {
		displayThread = new Thread() {
>>>>>>> origin/master
			public void run() {
				while(isRunning) {					
					DatagramPacket packet = receivePacket();
					String message = new String(packet.getData());
					messageQueue.add(new Message(message));
				}
			}
		}.start();
	}
	
	public DatagramPacket receivePacket() {
		byte[] data = new byte[1024];
		DatagramPacket packet = new DatagramPacket(data, data.length);

		try {
			socket.receive(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return packet;
	}
	
	public void displayMessages() {
		new Thread("DisplayMessages") {
			public void run() {
				while (isRunning) {
					if (!window.isActive())
						continue;
					
					Message message;
					if ((message = messageQueue.poll()) != null) {
						window.displayMessage(message);
					}
				}
			}
<<<<<<< HEAD
		}.start();
	}	
	
=======
		};
		displayThread.start();
	}

	public void deactivateMessages() {
		displayThread.interrupt();
	}

>>>>>>> origin/master
	public Queue<Message> getMessageQueue() {
		return messageQueue;
	}

	public static void main(String[] args) {
		Client testClient = new Client();
	}
}
